
----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 06.06.2023 23:32:45
-- Design Name: 
-- Module Name: Segmant_display - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity Segmant_display is

Port(
 clk_in : in std_logic;
    reset : in std_logic;
  AN_IN : out std_logic_vector  (7 downto 0);
  LED_OUT : out std_logic_vector (6 downto 0)
  
 
);
end Segmant_display;

architecture Behavioral of Segmant_display is

 signal counter : integer range 0 to 100000000 := 0; -- Divide 100 MHz clock by 2
    signal clk_out : std_logic := '0';
    constant DIVIDER_VALUE : integer := 100000000; -- Divide factor (100 MHz / (DIVIDER_VALUE + 1))
    signal temp : integer range 0 to 9 := 0;
begin
  process (clk_in, reset)
  begin
    if reset = '1' then
      counter <= 0;
      clk_out <= '0';
    elsif rising_edge(clk_in) then
      if counter = DIVIDER_VALUE then
       counter <= 0;
        clk_out <= not clk_out;
       if temp = 9 then
                    temp <= 0;
                else
                    temp <= temp + 1;
                end if;
                
            else
                counter <= counter + 1;
            end if;
        end if;
        
  end process;

process(temp)
begin

 AN_IN <= "00001111";
        case temp is
            when 0 =>
                LED_OUT <= "0001001"; -- 0
            when 1 =>
              LED_OUT <= "0001000"; -- 1
           when 2 =>
                LED_OUT <= "0111000"; -- 2
            when 3 =>
                LED_OUT <= "0111000"; -- 3
            when 4 =>
                LED_OUT <= "1000000"; -- 4
--            when 5 =>
--                LED_OUT <= "1011111"; -- 5
--            when 6 =>
--               LED_OUT <= "0111111"; -- 6
            --when 7 =>
                --LED_OUT <= "0001111"; -- 7
            --when 8 =>
                --LED_OUT <= "0000000"; -- 8
           --when 9 =>
               --LED_OUT <= "0000100"; -- 9
            when others =>
                LED_OUT <= "1111111"; -- Blank display
        end case;

end process;


end Behavioral;
