library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity VendingMachine is
    Port (
        LED_OUT : out std_logic_vector (6 downto 0);
        clk_in       : in std_logic;
      
        reset     : in std_logic;
        SW  : in std_logic_vector(1 downto 0);
        SW2 : in std_logic_vector(2 downto 0);
        AN_IN : out std_logic_vector(7 downto 0)
    );
end VendingMachine;

architecture Behavioral of VendingMachine is

    signal counter : integer range 0 to 10000 := 0;
    signal clk_out : std_logic := '0';
    constant DIVIDER_VALUE : integer := 10000;
    signal temp : integer range 0 to 9 := 0;

  type StateType is (Idle,item_select, Coin, Dispense);
  signal  next_state : StateType;
  

 
    
begin

    process (clk_in, reset)
    begin
        if reset = '1' then
            counter <= 0;
            clk_out <= '0';
        elsif rising_edge(clk_in) then
            if counter = DIVIDER_VALUE then
                counter <= 0;
                clk_out <= not clk_out;
                if temp = 9 then
                    temp <= 0;
                else
                    temp <= temp + 1;
                end if;
            else
                counter <= counter + 1;
            end if;
        end if;
    end process;





  
  
   
process ( SW2,temp)
   
    
    begin
       
case SW2 is            
   when "000" =>
                        
         case temp is
                    when 0 =>
                         AN_IN <= "01111111";   
                        LED_OUT <= "1000110";
                     when 1 =>
                        AN_IN <= "10111111";
                        LED_OUT <= "1000000";
                    when 2 =>
                        AN_IN <= "11011111";
                        LED_OUT <= "1000111";
                    when 3 =>
                        AN_IN <= "11101111";
                        LED_OUT <= "0001000"; 
  
                    when others =>
                        AN_IN <= "11111111";
                        LED_OUT <= "1111111";
                        
  
           end case;
      when "001" =>
                     
         case temp is
                    when 0 =>
                        AN_IN <= "01111111";
                        LED_OUT <= "1011110";
                    when 1 =>
                        AN_IN <= "10111111";
                        LED_OUT <= "1001100";
                    when 2 =>
                        AN_IN <= "11011111";
                        LED_OUT <= "1110111";
                    when 3 =>
                        AN_IN <= "11101111";
                        LED_OUT <= "0001110"; 
  
                    when others =>
                        AN_IN <= "11111111";
                        LED_OUT <= "1111111";
                        
        
          end case;
                     
      when "010" =>
      
                 case temp is
                     when 0 =>
                         AN_IN <= "01111111";
                         LED_OUT <= "1011111";
                        when 1 =>
                         AN_IN <= "10111111";
                         LED_OUT <= "1101100";
                     when 2 =>
                         AN_IN <= "11011111";
                         LED_OUT <= "1110101";
                     when 3 =>
                         AN_IN <= "11101111";
                         LED_OUT <= "1001110"; 
  
                    when others =>
                         AN_IN <= "11111111";
                         LED_OUT <= "1111111";
                         
  
                end case;
                        
      when "100" =>
                  case temp is
                     when 0 =>
                        AN_IN <= "01111111";
                        LED_OUT <= "1011110";
                     when 1 =>
                        AN_IN <= "10111111";
                        LED_OUT <= "1001100";
                    when 2 =>
                         AN_IN <= "11011111";
                         LED_OUT <= "1110111";
                     when 3 =>
                         AN_IN <= "11101111";
                         LED_OUT <= "0001110"; 
  
                     when others =>
                         AN_IN <= "11111111";
                         LED_OUT <= "1111111";
                          
  
                end case;             
      when others =>
                        
                        AN_IN <= "11111111";
                        LED_OUT <= "1111111";
end case;
     
end process;
end Behavioral;
