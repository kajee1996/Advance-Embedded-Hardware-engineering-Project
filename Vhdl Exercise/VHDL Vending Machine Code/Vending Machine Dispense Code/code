library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity VENDING_SAMPLE is
  Port(
    clk_in  : in std_logic;
    reset   : in std_logic;
    AN_IN   : out std_logic_vector(7 downto 0);
    LED_OUT : out std_logic_vector(6 downto 0);
    SW3 : in std_logic_vector (1 downto 0);
    SW : in std_logic_vector (1 downto 0);
    SW2 : in std_logic_vector (2 downto 0);
    SW4 : in std_logic ;
    LED_G,LED_R,LED: out std_logic
  );
end VENDING_SAMPLE;

architecture Behavioral of VENDING_SAMPLE is
  signal counter : integer range 0 to 1000000 := 0;
  signal clk_out : std_logic := '0';
  constant DIVIDER_VALUE : integer := 1000000;
  signal temp : integer range 0 to 9 := 0;

  
begin
  process (clk_in, reset)
  begin
    if reset = '1' then
      counter <= 0;
      clk_out <= '0';
    elsif rising_edge(clk_in) then
      if counter = DIVIDER_VALUE then
        counter <= 0;
        clk_out <= not clk_out;
        if temp = 9 then
          temp <= 0;
        else
          temp <= temp + 1;
        end if;
      else
        counter <= counter + 1;
      end if;
    end if;
  end process;
  

  process (SW4,SW2,SW3, clk_out)

  begin
   
     case SW4 is 
   when '1' =>
  -- LED <= '1';
             case SW2 is 
               when "000" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '1';
                          LED_R <= '0'; 
                      when "10" =>
                          LED_G <= '1';
                          LED_R <= '0';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case;
             when "001" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                      when "10" =>
                          LED_G <= '1';
                          LED_R <= '0';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case;
            when "010" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '1';
                          LED_R <= '0'; 
                      when "10" =>
                          LED_G <= '1';
                          LED_R <= '0';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case; 
            when "100" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                      when "10" =>
                          LED_G <= '0';
                          LED_R <= '1';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case; 
            when others =>
                   LED_G <= '1';
                   LED_R <= '1';

            end case;
  when others =>
    --       LED <= '0';
           
            
                
   end case;
 
     
    end process;
  

end Behavioral;
