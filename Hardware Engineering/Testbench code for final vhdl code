library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity VENDING_SAMPLE_new_TB is
end VENDING_SAMPLE_new_TB;

architecture Behavioral of VENDING_SAMPLE_new_TB is
  -- Component declaration
  component VENDING_SAMPLE_new
    Port (
      clk_in   : in std_logic;
      reset    : in std_logic;
      AN_IN    : out std_logic_vector(7 downto 0);
      LED_OUT  : out std_logic_vector(6 downto 0);
      SW2      : in std_logic_vector(2 downto 0);
      SW3      : in std_logic_vector(1 downto 0);
      SW4      : in std_logic;
      LED_G    : out std_logic;
      LED_R    : out std_logic;
      SW       : in std_logic_vector(2 downto 0)
    );
  end component;

  -- Signal declarations
  signal clk_in_tb    : std_logic := '0';
  signal reset_tb     : std_logic := '0';
  signal AN_IN_tb     : std_logic_vector(7 downto 0);
  signal LED_OUT_tb   : std_logic_vector(6 downto 0);
  signal SW2_tb       : std_logic_vector(2 downto 0);
  signal SW3_tb       : std_logic_vector(1 downto 0);
  signal SW4_tb       : std_logic;
  signal LED_G_tb     : std_logic;
  signal LED_R_tb     : std_logic;
  signal SW_tb        : std_logic_vector(2 downto 0);

begin
  -- Instantiate the design under test
  UUT: VENDING_SAMPLE_new
    Port Map (
      clk_in   => clk_in_tb,
      reset    => reset_tb,
      AN_IN    => AN_IN_tb,
      LED_OUT  => LED_OUT_tb,
      SW2      => SW2_tb,
      SW3      => SW3_tb,
      SW4      => SW4_tb,
      LED_G    => LED_G_tb,
      LED_R    => LED_R_tb,
      SW       => SW_tb
    );

  -- Clock generation process
  clk_process: process
  begin
    clk_in_tb <= '0';
    wait for 10 ns;
    clk_in_tb <= '1';
    wait for 10 ns;
  end process;

  -- Stimulus process
  stim_process: process
  begin
    -- Initialize inputs
    reset_tb <= '1';
    SW2_tb <= "000";
    SW3_tb <= "00";
    SW4_tb <= '0';
    SW_tb <= "000";

    -- Wait for reset to be released
    wait for 100 ns;
    reset_tb <= '0';

    -- Apply test cases
    wait for 100 ns;
    SW2_tb <= "010";
    wait for 100 ns;
    SW2_tb <= "000";
    wait for 100 ns;
    SW2_tb <= "001";
    wait for 100 ns;
    SW3_tb <= "10";
    wait for 100 ns;
    SW3_tb <= "00";
    wait for 100 ns;
    SW4_tb <= '1';
    wait for 100 ns;
    SW4_tb <= '0';

    -- Add more test cases as needed

    -- End simulation
    wait;
  end process;

end Behavioral;
