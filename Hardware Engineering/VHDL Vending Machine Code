


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity VENDING_SAMPLE_new is
  Port(
    clk_in  : in std_logic;
    reset   : in std_logic;
    AN_IN   : out std_logic_vector(7 downto 0);
    
    LED_OUT : out std_logic_vector(6 downto 0);
    SW2 : in std_logic_vector(2 downto 0);
    SW3 : in std_logic_vector (1 downto 0);
    SW4 : in std_logic ;
    LED_G,LED_R: out std_logic;
    SW: in std_logic_vector(2 downto 0)
  );
end VENDING_SAMPLE_new;

architecture Behavioral of VENDING_SAMPLE_new is

  signal counter : integer range 0 to 100000 := 0;
  signal clk_out : std_logic := '0';
  constant DIVIDER_VALUE : integer := 100000;
  signal temp : integer range 0 to 9 := 0;

  type StateType is (Idle, item_select, Coin, Dispense);
  signal  next_state : StateType:= Idle;


begin
    process (clk_in, reset)
         begin
            if reset = '1' then
                    counter <= 0;
                    clk_out <= '0';
            elsif rising_edge(clk_in) then
                    if counter = DIVIDER_VALUE then
                         counter <= 0;
                         clk_out <= not clk_out;
                    if temp = 9 then
                        temp <= 0;
                    else
                         temp <= temp + 1;
                     end if;
            else
                 counter <= counter + 1;
                    end if;
              end if;
     end process;


process (SW)
  begin


        case SW is
            when "001" => next_state<= Idle;
            when "010" => next_state<= item_select;
            when "100" => next_state<= coin;
            when "111"=> next_state<= dispense;
            when others => next_state<= Idle;
        end case;


end process;



   
process ( SW2,temp)
   
    
    begin


    
    
    
    
if next_state =  item_select then      
        case SW2 is            
           when "000" =>
          --------Display Cola---------                      
                 case temp is
                            when 0 =>
                                 AN_IN <= "01111111";   
                                LED_OUT <= "1000110";
                                
                             when 1 =>
                                AN_IN <= "10111111";
                                LED_OUT <= "1000000";
                            when 2 =>
                                AN_IN <= "11011111";
                                LED_OUT <= "1000111";
                            when 3 =>
                                AN_IN <= "11101111";
                                LED_OUT <= "0001000"; 
                              when 4 =>
                                AN_IN <= "11111101";
                                LED_OUT <= "0100100"; 
           
                            when others =>
                                AN_IN <= "11111111";
                                LED_OUT <= "1111111";
                                
          
                   end case;
              when "001" =>
       ------------------Display CHIP ------------                      
                 case temp is
                            when 0 =>
                                AN_IN <= "01111111";
                                LED_OUT <= "1000110";
                            when 1 =>
                                AN_IN <= "10111111";
                                LED_OUT <= "1001001";
                            when 2 =>
                                AN_IN <= "11011111";
                                LED_OUT <= "1001111";
                            when 3 =>
                                AN_IN <= "11101111";
                                LED_OUT <= "0001100"; 
                            when 4 =>
                                AN_IN <= "11111101";
                                LED_OUT <= "0110000"; 
           
                            when others =>
                                AN_IN <= "11111111";
                                LED_OUT <= "1111111";
                                
                
                  end case;
                             
              when "010" =>
              
                         case temp is
                             when 0 =>
                                 AN_IN <= "01111111";
                                 LED_OUT <= "1001111";
                                when 1 =>
                                 AN_IN <= "10111111";
                                 LED_OUT <= "1000110";
                             when 2 =>
                                 AN_IN <= "11011111";
                                 LED_OUT <= "0000110";
                              when 3 =>
                                AN_IN <= "11111101";
                                LED_OUT <= "1001111"; 
           
          
                            when others =>
                                 AN_IN <= "11111111";
                                 LED_OUT <= "1111111";
                                 
          
                        end case;
                                
              when "100" =>
                          case temp is
                             when 0 =>
                                AN_IN <= "01111111";
                                LED_OUT <= "0010010";
                             when 1 =>
                                AN_IN <= "10111111";
                                LED_OUT <= "1000000";
                            when 2 =>
                                 AN_IN <= "11011111";
                                 LED_OUT <= "0100001";
                             when 3 =>
                                 AN_IN <= "11101111";
                                 LED_OUT <= "0001000"; 
                            when 4 =>
                                AN_IN <= "11111101";
                                LED_OUT <= "0011001"; 
           
                             when others =>
                                 AN_IN <= "11111111";
                                 LED_OUT <= "1111111";
                                  
          
                        end case;             
              when others =>
                                
                                AN_IN <= "11111111";
                                LED_OUT <= "1111111";
        end case;
  
elsif next_state =  coin then  
 AN_IN <= "11111110";
       
         case SW3 is
              when "00" =>
              
                   case temp is
                         when 0 =>
                              
                              LED_OUT <= "1001111"; 
                        when others =>
                             
                              LED_OUT <= "1111111";
                    end case;        
  
                   
               when "01" =>
                     
                     case temp is
                         when 0 =>
                             
                             LED_OUT <= "0100100";
                         when others =>

                             LED_OUT <= "1111111";   
                             
                         end case;
                     
                    when "10" =>
                          case temp is
                         when 0 =>
                              
                              LED_OUT <= "0110000"; 
                        when others =>
                             
                              LED_OUT <= "1111111";
                        end case;    


                    when "11" =>

                          case temp is
                         when 0 =>
                              
                              LED_OUT <= "0011001"; 
                        when others =>
                             
                              LED_OUT <= "1111111";
                        end case; 
                        
                         AN_IN <= "11111111";
                           
                                LED_OUT <= "1111111";  
                             
       end case;   

 elsif next_state =  dispense then 
 
     case SW4 is 
   when '1' =>
  -- LED <= '1';
             case SW2 is 
               when "000" =>
                    case SW3 is
                     
                      when "01" =>
                          
                             AN_IN <= "11111101";
                                LED_OUT <= "1000000";  
                      when "10" =>
                        
                          AN_IN <= "11111101";
                          LED_OUT <= "1001111";  
                      when "11" =>
                          
                             AN_IN <= "11111101";
                                LED_OUT <= "0100100";  
                      when others =>
                          
                            AN_IN <= "11111111";
                                LED_OUT <= "1111111"; 
                    end case;
             when "001" =>
                    case SW3 is 
                    
                      when "11" =>
--                          LED_G <= '1';
--                          LED_R <= '0';
                              AN_IN <= "11111101";
                                LED_OUT <= "1000000";
                      when others =>
                            AN_IN <= "11111111";
                                LED_OUT <= "1111111"; 
                    end case;
            when "010" =>
                    case SW3 is 
                     
                       when "00" =>
                          
                             AN_IN <= "11111101";
                                LED_OUT <= "1000000";  
                         when "01" =>
                           AN_IN <= "11111101";
                                LED_OUT <= "1001111";
                                         
                      when "10" =>
                            AN_IN <= "11111101";
                                LED_OUT <= "0100100";
                      when "11" =>
                          AN_IN <= "11111101";
                                LED_OUT <= "0110000";
                      when others =>
                         
                           AN_IN <= "11111111";
                                LED_OUT <= "1111111";
                                
                    end case; 
            when "100" =>
                    case SW3 is 
                       when "10" =>
                           AN_IN <= "11111101";
                                LED_OUT <= "1000000";
                                
                      when "11" =>
                          
                           AN_IN <= "11111101";
                                LED_OUT <= "1001111";
                                
                      when others =>
                          
                           AN_IN <= "11111111";
                                LED_OUT <= "1111111";
                                 
                    end case; 
            when others =>
                 
                      AN_IN <= "11111111";
                                LED_OUT <= "1111111";  

            end case;
  when others =>
    --       LED <= '0';
           
          
                
   end case;
 
  
  end if;   
end process;

-----------------------------dispense-------------------------


  process (next_state,SW4,SW2,SW3, clk_out)

  begin
   if next_state =  dispense then

     case SW4 is 
   when '1' =>
  -- LED <= '1';
             case SW2 is 
               when "000" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '1';
                          LED_R <= '0'; 
                      when "10" =>
                          LED_G <= '1';
                          LED_R <= '0';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case;
             when "001" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                      when "10" =>
                          LED_G <= '1';
                          LED_R <= '0';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case;
            when "010" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '1';
                          LED_R <= '0'; 
                      when "10" =>
                          LED_G <= '1';
                          LED_R <= '0';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case; 
            when "100" =>
                    case SW3 is 
                       when "00" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                       when "01" =>
                          LED_G <= '0';
                          LED_R <= '1'; 
                      when "10" =>
                          LED_G <= '0';
                          LED_R <= '1';  
                      when "11" =>
                          LED_G <= '1';
                          LED_R <= '0';
                      when others =>
                          LED_G <= '1';
                          LED_R <= '1';  
                    end case; 
            when others =>
                   LED_G <= '1';
                   LED_R <= '1';

            end case;
  when others =>
    --       LED <= '0';
           
            
                
   end case;
 
 end if; 
    end process;


--------------------------end dispense------------------------





end Behavioral;

